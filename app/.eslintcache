[{"/home/deep/codes/farmer/app/src/App.js":"1","/home/deep/codes/farmer/app/src/balances.js":"2","/home/deep/codes/farmer/app/src/baseComponet.js":"3","/home/deep/codes/farmer/app/src/index.js":"4","/home/deep/codes/farmer/app/src/block.js":"5"},{"size":1024,"mtime":1630920004698,"results":"6","hashOfConfig":"7"},{"size":15969,"mtime":1630655749483,"results":"8","hashOfConfig":"7"},{"size":6387,"mtime":1630655749483,"results":"9","hashOfConfig":"7"},{"size":221,"mtime":1630655749483,"results":"10","hashOfConfig":"7"},{"size":1208,"mtime":1630920436500,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"vm4l3u",{"filePath":"14","messages":"15","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/deep/codes/farmer/app/src/App.js",["24","25","26","27"],"/home/deep/codes/farmer/app/src/balances.js",["28","29","30","31","32"],"import React from 'react';\nimport Block from './block';\nimport BaseComponent from './baseComponet';\nimport { List, message, Avatar, Spin, Steps } from 'antd';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport { Layout, Menu, Button, Card } from 'antd';\nimport {\n  UserOutlined,\n  PieChartOutlined,\n  UploadOutlined,\n  TeamOutlined,\n} from '@ant-design/icons';\n\nimport { Form, Input, Select } from 'antd';\n\nconst { Header, Sider} = Layout;\nconst { Step } = Steps;\n\nconst { Option } = Select;\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\n\n\nclass Demo extends BaseComponent {\n  formRef = React.createRef();\n\n  constructor(props) {\n    super(props);\n    this.onFinish = this.onFinish.bind(this);\n    this.state = {\n      balanceList:[],\n      status:\"\",\n      host:\"\",\n      addr:\"\",\n    }\n  }\n\n  onNumberChange = (value) => {\n    this.queryAddrs(value);\n  }\n\n  onFinish = (values) => {\n    this.transfer(values.address, values.number);\n    this.refreshBalance();\n  };\n\n  componentDidMount() {\n    this.refreshBalance();\n  }\n\n  render() {\n    return (\n      <div>\n      <Form {...layout} name=\"control-ref\" onFinish={this.onFinish} style={{margin:70}} ref={this.formRef}>\n        <Form.Item\n          name=\"address\"\n          label=\"区块链地址\"\n          rules={[\n            {\n              required: true,\n            },\n          ]} style={{width:\"90%\"}}\n        >\n          <Input placeholder={this.state.addr} disabled/>\n        </Form.Item>\n        <Form.Item\n          name=\"addr\"\n          label=\"邮寄地址\"\n          rules={[\n            {\n              required: false,\n            },\n          ]} style={{width:\"90%\"}}\n        >\n          <Input placeholder={this.state.host} disabled/>\n        </Form.Item>\n        <Form.Item\n          name=\"number\"\n          label=\"果树编号\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select\n            placeholder=\"选择你拥有的果树编号\"\n            allowClear\n            style={{width:\"80%\"}} onChange={this.onNumberChange}\n          > \n            {this.state.balanceList.map(item => (<Option value={item} key={item}>果树编号: {item}</Option>))}\n          </Select>\n        </Form.Item>\n\n\n      </Form>\n      </div>\n    );\n  }\n}\n\n\nclass MyCard extends BaseComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGetMoney:false\n    }\n    this.refInput = React.createRef();\n  }\n\n  changeAddr = (e) => {\n    this.refInput.current.value = e.target.value;\n  }\n\n  addAddr = () => {\n    let addr = this.refInput.current.value;\n    console.log(\"add addr\", this.state.number, addr);\n    this.recordAddr(this.state.number, addr)\n  }\n\n  getBidReturn = () => {\n    this.getBidAmount();\n  }\n  componentDidMount() {\n    this.getBidInfo();\n    this.refreshProcess();\n    this.getAmount();\n  }\n\n  render() {\n    return (\n      <Card title=\"我的竞拍\">\n        <Card type=\"inner\" title=\"我的地址\" >\n          <strong>{this.state.account}</strong>\n        </Card>\n        <Card type=\"inner\" title=\"我的出价\" >\n          <strong>{this.state.price / 10**18} ETH</strong>\n        </Card>\n          <Card\n            style={{ marginTop: 16 }}\n            type=\"inner\"\n            title=\"果树编号\"\n          >\n            {this.state.number === '0'?\"无\":this.state.number}\n          </Card>\n            <Card\n              style={{ marginTop: 16 }}\n              type=\"inner\"\n              title=\"邮寄地址(地址确认期可填写)\"\n            >\n              <input style={{marginRight:\"10px\"}} type=\"text\"　placeholder={this.state.host}　ref={this.refInput} onChange={this.changeAddr.bind(this)}></input>\n              <Button type=\"dashed\" size=\"middle\" onClick={this.addAddr.bind(this)}>确定</Button>\n\n            </Card>\n            <Card\n              style={{ marginTop: 16 }}\n                type=\"inner\"\n                title=\"收益(结算期可提取)\"\n            >\n              <label>预估返利: {this.state.amount}</label>\n              \n              {!this.state.isGetMoney?\n              <Button type=\"primary\" size=\"middle\" style={{marginLeft:\"20px\"}} onClick={this.getBidReturn.bind(this)}>提取返利</Button>\n              : <Button type=\"primary\" size=\"middle\" style={{marginLeft:\"20px\"}} disabled>已提取返利</Button>\n            }\n            </Card>\n    </Card>\n    );\n  }\n}\n\nclass InfiniteListExample extends BaseComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tcs:[],\n      hightests:[],\n      addrs:[],\n      data:[],\n      status:4,\n      loading: false,\n      hasMore: true,\n    };\n    this.refInput = React.createRef();\n  }\n  \n  componentDidMount() {\n    this.refreshProcess()\n    this.getTcs();\n    this.getAddrs();\n    this.getHighest();\n    }\n\n  bidTrc = (number) => {\n    console.log(\"bidTrc\", this.refInput.current.value);\n    console.log(\"bidTrc\", number);\n    this.postBid(parseInt(number), parseFloat(this.refInput.current.value))\n    this.getTcs();\n  }\n\n  changPrice = (e) => {\n    console.log(e.target.value);\n    this.refInput.current.value = e.target.value;\n  }\n\n  handleInfiniteOnLoad = () => {\n    let { tcs } = this.state;\n    this.setState({\n      loading: true,\n    });\n    if (tcs.length > 15) {\n      message.warning('已经到底了');\n      this.setState({\n        hasMore: false,\n        loading: false,\n      });\n      return;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"demo-infinite-container\">\n        <InfiniteScroll\n          initialLoad={false}\n          pageStart={0}\n          loadMore={this.handleInfiniteOnLoad}\n          hasMore={!this.state.loading && this.state.hasMore}\n          useWindow={false}\n        >\n          <List\n            dataSource={this.state.tcs}\n            renderItem={(item, index) => (\n              <List.Item key={index}>\n                <List.Item.Meta\n                  avatar={\n                    <Avatar src=\"logo192.png\" />\n                  }\n                  title={<a>{\"果树编号：\"+item}</a>}\n                />\n                <div>\n                  <p　className=\"ant-list-item-p\"><strong>当前最高价</strong>: {this.state.hightests[index] / 10**18 + \" ETH\"}</p>\n                  <p  className=\"ant-list-item-p\"><strong>最高者地址</strong>: {this.state.addrs[index]}</p>\n                  <input type=\"text\" ref={this.refInput} className=\"ant-list-item-p\" \n                    placeholder=\"出价(eth)\" style={{width:\"5em\"}} defaultValue=\"0.1\" onChange={this.changPrice.bind(this)} name=\"price\"/>\n                  {this.state.status === 0? <Button type=\"dashed\" size=\"middle\" onClick={this.bidTrc.bind(this, item)}>竞拍</Button>:\n                    <Button type=\"dashed\" size=\"middle\" disabled>已结束</Button>\n                  }\n                  </div>\n              </List.Item>\n            )}\n          >\n            {this.state.loading && this.state.hasMore && (\n              <div className=\"demo-loading-container\">\n                <Spin />\n              </div>\n            )}\n          </List>\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nclass MySteps extends BaseComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status:0, \n      processMap:[\"自由竞拍期\", \"地址确认期\", \"货物交割期\", \"确认申诉期\", \"结算期\"]\n    }\n  }\n\n\n  componentDidMount() {\n    this.refreshProcess();\n  }\n  render() {\n    return (\n    <Steps current={parseInt(this.state.status)}>\n      {this.state.processMap.map(item=><Step title={item} key={item}/>)}\n    </Steps>)\n  }\n}\n\nclass WithdrawOrConfirm extends BaseComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status:1, \n      isVote:4, \n    }\n  }\n  componentDidMount() {\n    this.getVote();\n  }\n\n  onClickItem　= (isWithdraw) => {\n    console.log(\"WithdrawOrConfirm\", this.state);\n    if(this.state.status != 3) {\n      message.warning(\"当前不是申诉期！\");\n    }\n    else if(this.state.isVote === 3) {\n      message.warning(\"您没有竞拍无法申诉或者确认收货\");\n    } else if(this.state.isVote === 4) {\n      message.warning(\"系统暂时无法获取您的竞拍信息！\");\n    } else{\n      this.vote(isWithdraw);\n    }\n  }\n  render() {\n    return (\n      <div>\n        <p　style={{width:\"50%\", marginLeft:\"22%\", marginTop:\"10%\"}}>确认申诉期,竞拍成功的您可以选择申诉或者确认收货,　如果选择申诉，并且大多数人也选择申诉时，farmer将得到无法获得你所竞拍果树所花费的奖励。\n          选择确认收货，并且大多数人也选择确认收货时，farmer 能提取竞拍奖励，您也将获取竞拍花费的10%的返利。\n        </p>\n      <Button type=\"primary\" htmlType=\"submit\" style={{marginLeft:\"30%\", marginTop:\"50px\"}} onClick={this.onClickItem.bind(this, true)}>\n      申诉投票\n    </Button>\n    <Button type=\"primary\" htmlType=\"submit\" style={{marginLeft:\"10%\"}} onClick={this.onClickItem.bind(this, false)} >\n          确认收货\n    </Button>\n    </div>\n    )\n  }\n}\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: false,\n    current:{key:1}\n  };\n\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  onClickItem = (index) => {\n    console.log(\"click item\", index);\n    this.setState({current:{key:index}});\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\n          <div className=\"logo\"><h1>果树Token化研究应用</h1>\n          </div>\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\" icon={<UserOutlined />} onClick={this.onClickItem.bind(this, 1)}>\n              我的竞拍\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<PieChartOutlined/>} onClick={this.onClickItem.bind(this, 2)}>\n              果树列表\n            </Menu.Item>\n            <Menu.Item key=\"3\" icon={<TeamOutlined />} onClick={this.onClickItem.bind(this, 3)}>\n              地址查询\n            </Menu.Item>\n            <Menu.Item key=\"４\" icon={<UploadOutlined />} onClick={this.onClickItem.bind(this, 4)}>\n              申诉or确认\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n            <h1>果树Token化研究应用</h1>\n            <MySteps/>\n          </Header>\n          {\n            (this.state.current.key === 1) && <MyCard/> ||\n            (this.state.current.key === 2 && <InfiniteListExample className=\"site-layout-background\"\n            style={{\n              margin: '24px 16px',\n              padding: 24,\n              minHeight: 280,\n              height: \"100%\",\n            }}></InfiniteListExample> ) || \n            (this.state.current.key === 3 && <Demo/>) ||\n            (this.state.current.key === 4 && <WithdrawOrConfirm/>)\n          }\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass ProcessStatus extends BaseComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: \"申诉期\"\n    }\n    this.refreshProcess = this.refreshProcess.bind(this);\n  }\n\n  async refreshProcess() {\n    await this.connect();\n    const {getProcess} = Block.meta.methods;\n    var res = await getProcess().call();\n    const processMap = {\"0\":\"自由认领交易期\", \"1\":\"申诉期\", \"2\":\"项目已结算\"};\n    console.log(\"ProcessStatus\", processMap[res]);\n    this.setState({status:processMap[res]});\n  }\n\n  componentDidMount() {\n    this.refreshProcess();\n    console.log('enter ProcessStatus componentWillMount ')\n  }\n\n  render() {\n    return (\n    <div>项目当前进度: <label>{this.state.status}</label></div>\n    );\n  }\n}\n\nclass TreeList extends BaseComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balanceList: []\n    }\n    this.refreshStatus = this.refreshStatus.bind(this);\n    console.log('enter constructor: ' + this.state.balanceList);\n  }\n\n  async refreshStatus() {\n    await this.connect();\n    const {getStatus} = Block.meta.methods;\n    var balanceList = await getStatus().call();\n    console.log('refreshStatus: '+ balanceList)\n    var newBalanceList = balanceList.map(function(item, index) {return {key:index+1, value:item}});\n    this.setState({balanceList:newBalanceList})\n  }\n  \n  componentDidMount() {\n      this.refreshStatus();\n      console.log('enter TreeList componentWillMount ')\n    }\n\n    render() {\n      return (\n        <div className=\"shopping-list\">\n          <h3>果树列表</h3>\n          <ul id=\"tree\">\n              {this.state.balanceList.map(item => (<li key={item.key}>果树编号: {item.key}</li>))}\n          </ul>\n        </div>\n      );\n    }\n  }\n\n  class ShowTree extends BaseComponent {\n    constructor(props) {\n      super(props);\n      this.state = {\n        balance: 0,\n        balanceList: []\n      }\n      this.refreshBalance = this.refreshBalance.bind(this);\n      console.log('enter constructor: ' + props);\n    }\n\n    async refreshBalance() {\n      await this.connect()\n      const {balanceOf} = Block.meta.methods;\n      const balance = await balanceOf(Block.account).call();\n      this.setState({balance: balance});\n      if (balance !== \"0\") {\n        const { getBalance } = Block.meta.methods;\n        const balanceList = await getBalance(Block.account).call();\n        console.log(balanceList);\n        var balanceListShow = balanceList.filter(item => item!==0);\n        this.setState({balanceList:balanceListShow});\n      }\n    }\n\n    componentDidMount() {\n      this.refreshBalance();\n      console.log('enter ShowTree componentWillMount ')\n    }\n\n    render() {\n      return (\n        <div>        \n          <div>我持有的果树共有：<label className=\"balance\"> {this.state.balance}</label>棵</div>\n          {this.state.balance !== 0 &&\n          <div>我持有的果树编号为: <label><strong className=\"balanceList\"> {this.state.balanceList.toString()}</strong></label></div> }\n        </div>\n        );\n    }\n  }\n\n  class TransactTrc extends BaseComponent {\n    constructor(props) {\n      super(props);\n      this.state = {\n        balance: 0,\n        balanceList: [],\n        status:\"\"\n      }\n      this.sendCoin = this.sendCoin.bind(this);\n      this.refAddr = this.refAddr.bind(this);\n      this.refNum = this.refNum.bind(this);\n      console.log('enter constructor: ' + props);\n    }\n\n    refAddr(node) {\n      this.addrInput = node;\n    }\n\n    refNum(node) {\n      this.numInput = node;\n    }\n\n    async transfer(receiver, amount) {\n      await this.connect();\n      this.setState({status:\"Initiating transaction... (please wait)\"})\n      const { transfer } = Block.meta.methods;\n      const success = await transfer(receiver, amount).send({ from: Block.account });\n      console.log(success);\n      this.setState({status:\"Transaction complete!\"});\n    }\n\n    sendCoin() {\n      const receiver = this.addrInput.value.trim();\n      const amount = this.numInput.value.trim();\n      console.log(receiver, amount);\n      if (!receiver) {\n        alert(\"请输入有效地址!\");\n        return;\n      }\n      if (!amount) {\n        alert(\"请输入有效果树编码!\");\n        return;\n      }\n       this.transfer(receiver, amount);\n    }\n\n    render() {\n      return (\n\n        <div>\n          向地址为:\n          <input type=\"text\" ref={this.refAddr} placeholder=\"e.g. 0x93e66d9baea28c17d9fc393b53e3fbdd76899dae\"/> 的人转让编号为:\n          <input type=\"text\" ref={this.refNum} placeholder=\"e.g. 3\" />\n          的果树\n          <button onClick={this.sendCoin}>确认</button>\n          {this.state.status !== \"\" && <p>{this.state.status}</p>}\n        </div>\n        );\n    }\n  }\nexport  {TreeList, ProcessStatus, ShowTree, TransactTrc, SiderDemo};\n","/home/deep/codes/farmer/app/src/baseComponet.js",["33","34"],"import React from 'react';\nimport Block from './block';\nimport { message } from 'antd';\nimport { ArrowsAltOutlined } from '@ant-design/icons';\n\nclass BaseComponent extends React.Component {\n\n    async connect() {\n      if (Block.meta === null || Block.auction === null) {\n        await Block.start();\n      }\n    }\n  \n    async refreshProcess() {\n      await this.connect();\n      let t = Math.ceil(new Date().valueOf() / 1000);\n      const {getProcess} = Block.auction.methods;\n      var res = await getProcess(t).call();\n      console.log(\"refreshProcess status:\", t, res)\n      this.setState({status:Number(res)});\n    }\n  \n    async getHighest() {\n      await this.connect()\n      const {getBidsHighest} = Block.auction.methods;\n      var hightests = await getBidsHighest().call();\n      console.log(hightests)\n      this.setState({hightests:hightests})\n    }\n  \n    async getTcs(){\n      await this.connect()\n      const {getTreeCoins} = Block.auction.methods;\n      console.log(getTreeCoins);\n      var tcs = await getTreeCoins().call();\n      console.log(tcs)\n      this.setState({tcs:tcs})\n    }\n  \n    async getAddrs() {\n      await this.connect()\n      const {getBidsAddr} = Block.auction.methods;\n      var addrs = await getBidsAddr().call();\n      console.log(addrs)\n      this.setState({addrs:addrs})\n    }\n  \n    async postBid(number, value) {\n      await this.connect();\n      const {bid} = Block.auction.methods;\n      var isSucceess = await bid(number).send({from:Block.account, value:value*10**18});\n      console.log(\"bid\", isSucceess);\n      if (isSucceess)　message.info(\"竞价成功！\");\n      else message.info(\"竞价失败！\");    \n    }\n    \n    async getBidInfo() {\n      await this.connect();\n      const {getBidHighInfo} = Block.auction.methods;\n      console.log(\"account\", Block.account);\n      var res = await getBidHighInfo().call({from:Block.account});\n      this.setState({price: res[0], number:res[1], host:res[2], account:res[3]})\n      console.log(\"getBidInfo\", res)\n    }\n  \n    async recordAddr(number, addr) {\n      await this.connect();\n      const {addAddr} = Block.auction.methods;\n      var isSucceess = await addAddr(number, addr).send({from:Block.account});\n      console.log(\"record addr\", isSucceess);\n    }\n\n    async vote(isWithdraw) {\n      await this.connect();\n      let number = this.state.number;\n      let value = this.state.price;\n      const {payForWithdraw} = Block.auction.methods;\n      var res = await payForWithdraw(number, isWithdraw).send({from:Block.account, value:value})\n      console.log(\"vote\", res)\n    }\n\n    async getVote() {\n      await this.connect();\n      let t = Math.ceil(new Date().valueOf() / 1000);\n      const {getProcess} = Block.auction.methods;\n      let res = Number(await getProcess(t).call());\n      this.setState({status:res})\n      console.log(\"getVote process\", t, res);\n      if (res === 3) {\n        const {getBidHighInfo} = Block.auction.methods;\n        res = await getBidHighInfo().call({from:Block.account});\n        this.setState({price: res[0], number:parseInt(res[1]), host:res[2], account:res[3]})\n        console.log(\"getBidHighInfo res\", res);\n        if (res[1] !== '0') {\n          let number = Number(res[1])\n          const {getPayInfo} = Block.auction.methods;\n          res = await getPayInfo(number).call({from:Block.account})\n          console.log(\"getPayInfo\", res);\n          this.setState({isVote:res})\n        } else {\n            this.setState({isVote:3}) //没有竞拍\n        }\n      } else {\n        this.setState({isVote:2}) //非申诉期\n      }\n    }\n\n\n    async getAmount() {\n      await this.connect();\n      const {isGetMoney} = Block.auction.methods;\n      var isReturn = await isGetMoney().call({from:Block.account});\n      this.setState({isGetMoney:isReturn});\n      const {queryAmount} = Block.auction.methods;\n      let res = await queryAmount().call({from:Block.account});\n      this.setState({amount:(res/10**18)});\n\n    }\n\n\n    async getBidAmount() {\n      await this.connect()\n      const {isGetMoney} = Block.auction.methods;\n      var isReturn = await isGetMoney().call({from:Block.account});\n      if (isReturn) {\n        message.warning(\"您已经提取过收益\");\n        return ;\n      }\n      if (this.state.amount == 0) {\n        message.info(\"您没有返利可以提取\")\n        return ;\n      }\n      const {getAmount} = Block.auction.methods;\n      await getAmount().send({from:Block.account})\n      message.info(\"提取完成！\");\n    }\n\n    async queryAddrs(number) {\n      await this.connect()\n      const {getAddrs} = Block.auction.methods;\n      let res = await getAddrs(number).call({from:Block.account});\n      console.log(\"queryAddrs\", res);\n      this.setState({host:res[0], addr:res[1]})\n    }\n\n\n\n    async refreshStatus() {\n      await this.connect();\n      const {getStatus} = Block.meta.methods;\n      var balanceList = await getStatus().call();\n      console.log('refreshStatus: '+ balanceList)\n      var newBalanceList = balanceList.map(function(item, index) {return {key:index+1, value:item}});\n      this.setState({balanceList:newBalanceList})\n    }\n  \n  \n    async refreshBalance() {\n      await this.connect()\n      const {balanceOf} = Block.meta.methods;\n      const balance = await balanceOf(Block.account).call();\n      this.setState({balance: balance});\n      if (balance !== \"0\") {\n        const { getBalance } = Block.meta.methods;\n        const balanceList = await getBalance(Block.account).call();\n        console.log(balanceList);\n        var balanceListShow = balanceList.filter(item => item!==\"0\");\n        this.setState({balanceList:balanceListShow});\n      }\n    }\n  \n    async transfer(receiver, amount) {\n      await this.connect();\n      this.setState({status:\"Initiating transaction... (please wait)\"})\n      message.info(this.state.status);\n      const { transfer } = Block.meta.methods;\n      const success = await transfer(receiver, amount).call({ from: Block.account });\n      console.log(success);\n      this.setState({status:\"Transaction complete!\"});\n      message.info(this.state.status);\n    }\n  \n    async buy(number) {\n      await this.connect();\n      console.log(number);\n      const {buyTrc} = Block.meta.methods;\n      const success = await buyTrc(number).send({from: Block.account, value:10**17});\n      console.log(\"buy\", success);\n    }\n  \n  }\n\n  export default BaseComponent;","/home/deep/codes/farmer/app/src/index.js",[],"/home/deep/codes/farmer/app/src/block.js",[],{"ruleId":"35","severity":1,"message":"36","line":6,"column":20,"nodeType":"37","messageId":"38","endLine":6,"endColumn":33},{"ruleId":"35","severity":1,"message":"39","line":6,"column":35,"nodeType":"37","messageId":"38","endLine":6,"endColumn":43},{"ruleId":"35","severity":1,"message":"40","line":6,"column":45,"nodeType":"37","messageId":"38","endLine":6,"endColumn":53},{"ruleId":"35","severity":1,"message":"41","line":6,"column":55,"nodeType":"37","messageId":"38","endLine":6,"endColumn":66},{"ruleId":"35","severity":1,"message":"42","line":29,"column":7,"nodeType":"37","messageId":"38","endLine":29,"endColumn":17},{"ruleId":"43","severity":1,"message":"44","line":253,"column":26,"nodeType":"45","endLine":253,"endColumn":29},{"ruleId":"46","severity":1,"message":"47","line":314,"column":26,"nodeType":"48","messageId":"49","endLine":314,"endColumn":28},{"ruleId":"50","severity":1,"message":"51","line":385,"column":44,"nodeType":"52","messageId":"53","endLine":385,"endColumn":46},{"ruleId":"50","severity":1,"message":"51","line":385,"column":57,"nodeType":"52","messageId":"53","endLine":385,"endColumn":59},{"ruleId":"35","severity":1,"message":"54","line":4,"column":10,"nodeType":"37","messageId":"38","endLine":4,"endColumn":27},{"ruleId":"46","severity":1,"message":"55","line":129,"column":29,"nodeType":"48","messageId":"49","endLine":129,"endColumn":31},"no-unused-vars","'ProcessStatus' is defined but never used.","Identifier","unusedVar","'TreeList' is defined but never used.","'ShowTree' is defined but never used.","'TransactTrc' is defined but never used.","'tailLayout' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'ArrowsAltOutlined' is defined but never used.","Expected '===' and instead saw '=='."]